{
  "hash": "a567b5005f98f99519cfa467acafc3d9",
  "result": {
    "markdown": "---\ntitle: \"Comparison between Netflix and Amazon Prime\"\ndescription: \"Netflix and Amazon Prime are two of the most popular TV streaming services in the world. This document will compare the two and give you an idea of which one is better for you.\"\ndate: \"2022-06-09\"\ncategories: [data visualization, python, data analysis]\nimage: \"netflix-vs-amazon-prime.jpg\"\ndraft: true\n---\n\n## Objective\n\nThis code is a comparison of Netflix and Amazon Prime. The data is from Kaggle, the [Netflix dataset](https://www.kaggle.com/datasets/victorsoeiro/netflix-tv-shows-and-movies) and [Amazon dataset](https://www.kaggle.com/datasets/victorsoeiro/amazon-prime-tv-shows-and-movies) websites.\n\n\n\n\n## Data Dictionary\n\nBoth datasets have a content table with informtion about the titles and a role table with information about the cast and directiors with the same columns.\n\n::: {#tbl-content .cell tbl-cap='Amazon and Netflix content table' execution_count=1}\n``` {.python .cell-code}\n# Load Libriries to handle tables\nfrom IPython.display import Markdown\nfrom tabulate import tabulate\n\n\ncontent_table = [\n    [\"ID\", \"The title ID on JustWatch\"],\n    [\"title\", \"The name of the title\"],\n    [\"show type\", \"TV show or movie\"],\n    [\"description\", \"A brief description\"],\n    [\"release year\", \"The year the title was released\"],\n    [\"age certification\", \"The age certification\"],\n    [\"runtime\", \"The length of the episode (SHOW) or movie (MOVIE)\"],\n    [\"genres\", \"A list of genres\"],\n    [\"production countries\", \"A list of countries that produced the title\"],\n    [\"seasons\", \"The number of seasons in the show\"],\n    [\"IMDB ID\", \"The IMDB ID of the title\"],\n    [\"IMDB Score\", \"The IMDB Score of the title\"],\n    [\"IMDB Votes\", \"The IMDB Votes of the title\"],\n    [\"TMDB Popularity\", \"The TMDB Popularity of the title\"],\n    [\"TMDB Score\", \"The TMDB Score of the title\"]\n]\n\nMarkdown(tabulate(\n  content_table, \n  headers=[\"Column\",\"Description\"]\n))\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\nColumn                Description\n--------------------  -------------------------------------------------\nID                    The title ID on JustWatch\ntitle                 The name of the title\nshow type             TV show or movie\ndescription           A brief description\nrelease year          The year the title was released\nage certification     The age certification\nruntime               The length of the episode (SHOW) or movie (MOVIE)\ngenres                A list of genres\nproduction countries  A list of countries that produced the title\nseasons               The number of seasons in the show\nIMDB ID               The IMDB ID of the title\nIMDB Score            The IMDB Score of the title\nIMDB Votes            The IMDB Votes of the title\nTMDB Popularity       The TMDB Popularity of the title\nTMDB Score            The TMDB Score of the title\n:::\n:::\n\n\n::: {#tbl-role .cell tbl-cap='Amazon and Netflix role table' execution_count=2}\n``` {.python .cell-code}\nrole_table = [\n    [\"person ID\", \"The person ID on JustWatch\"],\n    [\"ID\", \"The title ID on JustWatch\"],\n    [\"name\", \"The actor or director's name\"],\n    [\"character name\", \"The character name\"],\n    [\"role\", \"The role of the actor or director\"]\n]\n\n\nMarkdown(tabulate(\n  role_table, \n  headers=[\"Column\",\"Description\"]\n))\n\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\nColumn          Description\n--------------  ---------------------------------\nperson ID       The person ID on JustWatch\nID              The title ID on JustWatch\nname            The actor or director's name\ncharacter name  The character name\nrole            The role of the actor or director\n:::\n:::\n\n\n## Exploratory data analysis\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Importing the libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Importing the Netflix dataset\nnetflix_credits = pd.read_csv(\"dataset/netflix_data/credits.csv\")\nnetflix_titles = pd.read_csv(\"dataset/netflix_data/titles.csv\")\n\n# Importing the Amazon dataset\namazon_credits = pd.read_csv(\"dataset/netflix_data/credits.csv\")\namazon_titles = pd.read_csv(\"dataset/netflix_data/titles.csv\")\n```\n:::\n\n\n### Data Check\n\n#### Netflix Data\n\nTake a look at the Neflix data:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nnetflix_credits.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>person_id</th>\n      <th>id</th>\n      <th>name</th>\n      <th>character</th>\n      <th>role</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3748</td>\n      <td>tm84618</td>\n      <td>Robert De Niro</td>\n      <td>Travis Bickle</td>\n      <td>ACTOR</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>14658</td>\n      <td>tm84618</td>\n      <td>Jodie Foster</td>\n      <td>Iris Steensma</td>\n      <td>ACTOR</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7064</td>\n      <td>tm84618</td>\n      <td>Albert Brooks</td>\n      <td>Tom</td>\n      <td>ACTOR</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3739</td>\n      <td>tm84618</td>\n      <td>Harvey Keitel</td>\n      <td>Matthew 'Sport' Higgins</td>\n      <td>ACTOR</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>48933</td>\n      <td>tm84618</td>\n      <td>Cybill Shepherd</td>\n      <td>Betsy</td>\n      <td>ACTOR</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#tbl-role-check .cell tbl-cap='Netflix role table data check' execution_count=5}\n\n::: {.cell-output .cell-output-display execution_count=5}\nColumns    Column type      Null count\n---------  -------------  ------------\nperson_id  int64                     0\nid         object                    0\nname       object                    0\ncharacter  object                 9627\nrole       object                    0\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nnetflix_titles.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>title</th>\n      <th>type</th>\n      <th>description</th>\n      <th>release_year</th>\n      <th>age_certification</th>\n      <th>runtime</th>\n      <th>genres</th>\n      <th>production_countries</th>\n      <th>seasons</th>\n      <th>imdb_id</th>\n      <th>imdb_score</th>\n      <th>imdb_votes</th>\n      <th>tmdb_popularity</th>\n      <th>tmdb_score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ts300399</td>\n      <td>Five Came Back: The Reference Films</td>\n      <td>SHOW</td>\n      <td>This collection includes 12 World War II-era p...</td>\n      <td>1945</td>\n      <td>TV-MA</td>\n      <td>48</td>\n      <td>['documentation']</td>\n      <td>['US']</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.600</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>tm84618</td>\n      <td>Taxi Driver</td>\n      <td>MOVIE</td>\n      <td>A mentally unstable Vietnam War veteran works ...</td>\n      <td>1976</td>\n      <td>R</td>\n      <td>113</td>\n      <td>['crime', 'drama']</td>\n      <td>['US']</td>\n      <td>NaN</td>\n      <td>tt0075314</td>\n      <td>8.3</td>\n      <td>795222.0</td>\n      <td>27.612</td>\n      <td>8.2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>tm127384</td>\n      <td>Monty Python and the Holy Grail</td>\n      <td>MOVIE</td>\n      <td>King Arthur, accompanied by his squire, recrui...</td>\n      <td>1975</td>\n      <td>PG</td>\n      <td>91</td>\n      <td>['comedy', 'fantasy']</td>\n      <td>['GB']</td>\n      <td>NaN</td>\n      <td>tt0071853</td>\n      <td>8.2</td>\n      <td>530877.0</td>\n      <td>18.216</td>\n      <td>7.8</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>tm70993</td>\n      <td>Life of Brian</td>\n      <td>MOVIE</td>\n      <td>Brian Cohen is an average young Jewish man, bu...</td>\n      <td>1979</td>\n      <td>R</td>\n      <td>94</td>\n      <td>['comedy']</td>\n      <td>['GB']</td>\n      <td>NaN</td>\n      <td>tt0079470</td>\n      <td>8.0</td>\n      <td>392419.0</td>\n      <td>17.505</td>\n      <td>7.8</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>tm190788</td>\n      <td>The Exorcist</td>\n      <td>MOVIE</td>\n      <td>12-year-old Regan MacNeil begins to adapt an e...</td>\n      <td>1973</td>\n      <td>R</td>\n      <td>133</td>\n      <td>['horror']</td>\n      <td>['US']</td>\n      <td>NaN</td>\n      <td>tt0070047</td>\n      <td>8.1</td>\n      <td>391942.0</td>\n      <td>95.337</td>\n      <td>7.7</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#tbl-content-check .cell tbl-cap='Netflix content table data check' execution_count=7}\n\n::: {.cell-output .cell-output-display execution_count=7}\nColumns               Column type      Null count\n--------------------  -------------  ------------\nid                    object                    0\ntitle                 object                    1\ntype                  object                    0\ndescription           object                   18\nrelease_year          int64                     0\nage_certification     object                 2610\nruntime               int64                     0\ngenres                object                    0\nproduction_countries  object                    0\nseasons               float64                3759\nimdb_id               object                  444\nimdb_score            float64                 523\nimdb_votes            float64                 539\ntmdb_popularity       float64                  94\ntmdb_score            float64                 318\n:::\n:::\n\n\n#### Amazon Data\n\n\nTaking a look at the Amazon data:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\namazon_credits.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>person_id</th>\n      <th>id</th>\n      <th>name</th>\n      <th>character</th>\n      <th>role</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3748</td>\n      <td>tm84618</td>\n      <td>Robert De Niro</td>\n      <td>Travis Bickle</td>\n      <td>ACTOR</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>14658</td>\n      <td>tm84618</td>\n      <td>Jodie Foster</td>\n      <td>Iris Steensma</td>\n      <td>ACTOR</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7064</td>\n      <td>tm84618</td>\n      <td>Albert Brooks</td>\n      <td>Tom</td>\n      <td>ACTOR</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3739</td>\n      <td>tm84618</td>\n      <td>Harvey Keitel</td>\n      <td>Matthew 'Sport' Higgins</td>\n      <td>ACTOR</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>48933</td>\n      <td>tm84618</td>\n      <td>Cybill Shepherd</td>\n      <td>Betsy</td>\n      <td>ACTOR</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#tbl-amazon-role-check .cell tbl-cap='Amazon role table data check' execution_count=9}\n\n::: {.cell-output .cell-output-display execution_count=9}\nColumns    Column type      Null count\n---------  -------------  ------------\nperson_id  int64                     0\nid         object                    0\nname       object                    0\ncharacter  object                 9627\nrole       object                    0\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\namazon_titles.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>title</th>\n      <th>type</th>\n      <th>description</th>\n      <th>release_year</th>\n      <th>age_certification</th>\n      <th>runtime</th>\n      <th>genres</th>\n      <th>production_countries</th>\n      <th>seasons</th>\n      <th>imdb_id</th>\n      <th>imdb_score</th>\n      <th>imdb_votes</th>\n      <th>tmdb_popularity</th>\n      <th>tmdb_score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ts300399</td>\n      <td>Five Came Back: The Reference Films</td>\n      <td>SHOW</td>\n      <td>This collection includes 12 World War II-era p...</td>\n      <td>1945</td>\n      <td>TV-MA</td>\n      <td>48</td>\n      <td>['documentation']</td>\n      <td>['US']</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.600</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>tm84618</td>\n      <td>Taxi Driver</td>\n      <td>MOVIE</td>\n      <td>A mentally unstable Vietnam War veteran works ...</td>\n      <td>1976</td>\n      <td>R</td>\n      <td>113</td>\n      <td>['crime', 'drama']</td>\n      <td>['US']</td>\n      <td>NaN</td>\n      <td>tt0075314</td>\n      <td>8.3</td>\n      <td>795222.0</td>\n      <td>27.612</td>\n      <td>8.2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>tm127384</td>\n      <td>Monty Python and the Holy Grail</td>\n      <td>MOVIE</td>\n      <td>King Arthur, accompanied by his squire, recrui...</td>\n      <td>1975</td>\n      <td>PG</td>\n      <td>91</td>\n      <td>['comedy', 'fantasy']</td>\n      <td>['GB']</td>\n      <td>NaN</td>\n      <td>tt0071853</td>\n      <td>8.2</td>\n      <td>530877.0</td>\n      <td>18.216</td>\n      <td>7.8</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>tm70993</td>\n      <td>Life of Brian</td>\n      <td>MOVIE</td>\n      <td>Brian Cohen is an average young Jewish man, bu...</td>\n      <td>1979</td>\n      <td>R</td>\n      <td>94</td>\n      <td>['comedy']</td>\n      <td>['GB']</td>\n      <td>NaN</td>\n      <td>tt0079470</td>\n      <td>8.0</td>\n      <td>392419.0</td>\n      <td>17.505</td>\n      <td>7.8</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>tm190788</td>\n      <td>The Exorcist</td>\n      <td>MOVIE</td>\n      <td>12-year-old Regan MacNeil begins to adapt an e...</td>\n      <td>1973</td>\n      <td>R</td>\n      <td>133</td>\n      <td>['horror']</td>\n      <td>['US']</td>\n      <td>NaN</td>\n      <td>tt0070047</td>\n      <td>8.1</td>\n      <td>391942.0</td>\n      <td>95.337</td>\n      <td>7.7</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#tbl-amazon-content-check .cell tbl-cap='Amazon content table data check' execution_count=11}\n\n::: {.cell-output .cell-output-display execution_count=11}\nColumns               Column type      Null count\n--------------------  -------------  ------------\nid                    object                    0\ntitle                 object                    1\ntype                  object                    0\ndescription           object                   18\nrelease_year          int64                     0\nage_certification     object                 2610\nruntime               int64                     0\ngenres                object                    0\nproduction_countries  object                    0\nseasons               float64                3759\nimdb_id               object                  444\nimdb_score            float64                 523\nimdb_votes            float64                 539\ntmdb_popularity       float64                  94\ntmdb_score            float64                 318\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}